#coding:utf-8

import json
import six
import requests
import sys
from ..exceptions import OfficialAPIError
from ..conf import ActiveConf


class WechatRequest(object):
    '''
    WechatRequest请求类
    对微信服务器的请求响应处理进行封装
    '''
    
    def __init__(self,conf=None,activeConf=ActiveConf()):
        '''
        :param conf:WechatConf配置类实例        
        '''
        self.__conf = conf
        
        self.__activeConf = activeConf
    def request(self,method,url,access_token=None,**kwargs):
        '''
        向微信服务器发送请求
        :param method:请求方法
        :param url: 请求地址
        :param access_token: access token值，如果初始化时传入conf会自动获取，如果没有传入则请提供此值
        :param kwargs:附加数据
        :return: 微信服务器响应的JSON数据
        '''
        
        #access_token配置
        access_token = self.__conf.access_token if self.__conf is not None else access_token
        if "params" not in kwargs:
            kwargs["params"] = {
                "access_token":access_token            
            }
        else:
            kwargs["params"]["access_token"] = access_token
        
        
        
        #处理data键
        if isinstance(kwargs.get("data",""),dict):
            body = json.dumps(kwargs["data"],ensure_ascii=False)
            if isinstance(body,six.text_type):
                body = body.encode("utf-8")
            kwargs["data"] = body
        
        #发送数据
        r = requests.request(
            method = method,
            url=url,
            **kwargs
        )
        r.raise_for_status()
        try:
            response_json = r.json()
        except ValueError:#非JSON数据
            return r
        #提取响应包中的'headimgurl'键
        headimgurl = response_json.get("headimgurl")
        if headimgurl:
            response_json["headimgurl"] = headimgurl.replace('\\','')
            
        #判断返回的数据有没有错误码
        self._check_official_error(response_json)
        
        return response_json
    
    def get(self,url,params={},access_token=None):
        '''
        使用GET方法向微信服务器发出请求
        :param url:请求地址
        :param access_token: access token值,如果初始化时传入conf会自动获取，如果没有传入请提供此值
        :return: 微信服务器响应的JSON数据
        '''
        params["access_token"] = self.__activeConf.access_token
        response = requests.get(url,params=params)
        return response.json()
    
    def post(self,url,data):
        '''使用POST方法向微信服务器发出请求
        :param url: 请求地址
        :param access_token: access token值，如果初始化时传入conf会自动获取，如果没传入请提供此值
        :param kwargs:附加数据
        :return: 微信服务器响应的JSON数据
        '''
        params = {"access_token":self.__activeConf.access_token}
        data = json.dumps(data,encoding="utf-8",ensure_ascii=False)
        response = requests.post(url,data=data,params=params)
        return response.json()
    
    
    
    
    def _check_official_error(self,json_data):
        '''检测微信公共平台返回值中是否包含错误的返回码
        :raises OfficialAPIError: 如果返回码提示有错误，抛出异常；否则返回True
        '''
        if 'errcode' in json_data and json_data["errcode"] != 0:
            raise OfficialAPIError(errcode=json_data.get('errcode'),errmsg=json_data.get('errmsg',''))
        
            
            
        